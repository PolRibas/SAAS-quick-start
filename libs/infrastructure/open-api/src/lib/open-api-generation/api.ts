/* tslint:disable */
/* eslint-disable */
/**
 * Mary Shelley Api
 * Core api for Saas
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CompanyEntityDto
 */
export interface CompanyEntityDto {
    /**
     * 
     * @type {string}
     * @memberof CompanyEntityDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyEntityDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyEntityDto
     */
    'address'?: string;
    /**
     * The email of the Company
     * @type {string}
     * @memberof CompanyEntityDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyEntityDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyEntityDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyEntityDto
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface CompanyFindByCriteriaResponseDtoClass
 */
export interface CompanyFindByCriteriaResponseDtoClass {
    /**
     * Total number of items
     * @type {number}
     * @memberof CompanyFindByCriteriaResponseDtoClass
     */
    'total': number;
    /**
     * Current page of the results
     * @type {number}
     * @memberof CompanyFindByCriteriaResponseDtoClass
     */
    'page'?: number;
    /**
     * Limit for the results
     * @type {number}
     * @memberof CompanyFindByCriteriaResponseDtoClass
     */
    'limit'?: number;
    /**
     * Array of resulting items
     * @type {Array<CompanyEntityDto>}
     * @memberof CompanyFindByCriteriaResponseDtoClass
     */
    'items': Array<CompanyEntityDto>;
}
/**
 * 
 * @export
 * @interface CompanyUsersDto
 */
export interface CompanyUsersDto {
    /**
     * 
     * @type {string}
     * @memberof CompanyUsersDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyUsersDto
     */
    'companyId': string;
    /**
     * 
     * @type {string}
     * @memberof CompanyUsersDto
     */
    'name': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CompanyUsersDto
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CompanyUsersDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompanyUsersDto
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ContextCompanyDto
 */
export interface ContextCompanyDto {
    /**
     * 
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'address'?: string;
    /**
     * The email of the Company
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'updatedAt'?: string;
    /**
     * Permissions of the user for the company
     * @type {Array<string>}
     * @memberof ContextCompanyDto
     */
    'permissions': Array<string>;
    /**
     * Role of the user in the company
     * @type {string}
     * @memberof ContextCompanyDto
     */
    'role': string;
    /**
     * Role of the user in the company
     * @type {Array<MenuDto>}
     * @memberof ContextCompanyDto
     */
    'menu': Array<MenuDto>;
}
/**
 * 
 * @export
 * @interface FindByCriteriaCompanyUsersDto
 */
export interface FindByCriteriaCompanyUsersDto {
    /**
     * Total number of items
     * @type {number}
     * @memberof FindByCriteriaCompanyUsersDto
     */
    'total': number;
    /**
     * Current page of the results
     * @type {number}
     * @memberof FindByCriteriaCompanyUsersDto
     */
    'page'?: number;
    /**
     * Limit for the results
     * @type {number}
     * @memberof FindByCriteriaCompanyUsersDto
     */
    'limit'?: number;
    /**
     * Array of resulting items
     * @type {Array<CompanyUsersDto>}
     * @memberof FindByCriteriaCompanyUsersDto
     */
    'items': Array<CompanyUsersDto>;
}
/**
 * 
 * @export
 * @interface FindByCriteriaFilterConditionDto
 */
export interface FindByCriteriaFilterConditionDto {
    /**
     * The key for the condition
     * @type {string}
     * @memberof FindByCriteriaFilterConditionDto
     */
    'key': string;
    /**
     * The operation for the condition
     * @type {string}
     * @memberof FindByCriteriaFilterConditionDto
     */
    'operation': FindByCriteriaFilterConditionDtoOperationEnum;
    /**
     * The value for the condition
     * @type {object}
     * @memberof FindByCriteriaFilterConditionDto
     */
    'value': object;
}

export const FindByCriteriaFilterConditionDtoOperationEnum = {
    Eq: '$eq',
    Cn: '$cn',
    Ne: '$ne',
    Gt: '$gt',
    Gte: '$gte',
    Lt: '$lt',
    Lte: '$lte',
    In: '$in',
    Nin: '$nin',
    Exists: '$exists',
    Type: '$type',
    Mod: '$mod',
    All: '$all',
    Size: '$size'
} as const;

export type FindByCriteriaFilterConditionDtoOperationEnum = typeof FindByCriteriaFilterConditionDtoOperationEnum[keyof typeof FindByCriteriaFilterConditionDtoOperationEnum];

/**
 * 
 * @export
 * @interface FindByCriteriaRequestDto
 */
export interface FindByCriteriaRequestDto {
    /**
     * Array of filter conditions
     * @type {Array<FindByCriteriaFilterConditionDto>}
     * @memberof FindByCriteriaRequestDto
     */
    'conditions'?: Array<FindByCriteriaFilterConditionDto>;
    /**
     * Join operation for the conditions
     * @type {string}
     * @memberof FindByCriteriaRequestDto
     */
    'join'?: FindByCriteriaRequestDtoJoinEnum;
    /**
     * Sort key
     * @type {string}
     * @memberof FindByCriteriaRequestDto
     */
    'sortKey'?: string;
    /**
     * Sort order
     * @type {string}
     * @memberof FindByCriteriaRequestDto
     */
    'sortOrder'?: FindByCriteriaRequestDtoSortOrderEnum;
    /**
     * Limit for the results
     * @type {number}
     * @memberof FindByCriteriaRequestDto
     */
    'limit'?: number;
    /**
     * Page for the results
     * @type {number}
     * @memberof FindByCriteriaRequestDto
     */
    'page'?: number;
}

export const FindByCriteriaRequestDtoJoinEnum = {
    And: '$and',
    Or: '$or'
} as const;

export type FindByCriteriaRequestDtoJoinEnum = typeof FindByCriteriaRequestDtoJoinEnum[keyof typeof FindByCriteriaRequestDtoJoinEnum];
export const FindByCriteriaRequestDtoSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;

export type FindByCriteriaRequestDtoSortOrderEnum = typeof FindByCriteriaRequestDtoSortOrderEnum[keyof typeof FindByCriteriaRequestDtoSortOrderEnum];

/**
 * 
 * @export
 * @interface FindByCriteriaUserCompanyRolePresenterDto
 */
export interface FindByCriteriaUserCompanyRolePresenterDto {
    /**
     * Total number of items
     * @type {number}
     * @memberof FindByCriteriaUserCompanyRolePresenterDto
     */
    'total': number;
    /**
     * Current page of the results
     * @type {number}
     * @memberof FindByCriteriaUserCompanyRolePresenterDto
     */
    'page'?: number;
    /**
     * Limit for the results
     * @type {number}
     * @memberof FindByCriteriaUserCompanyRolePresenterDto
     */
    'limit'?: number;
    /**
     * Array of resulting items
     * @type {Array<UserCompanyRolePresenterDto>}
     * @memberof FindByCriteriaUserCompanyRolePresenterDto
     */
    'items': Array<UserCompanyRolePresenterDto>;
}
/**
 * 
 * @export
 * @interface FrontOfficeCompanyCreateRequestDto
 */
export interface FrontOfficeCompanyCreateRequestDto {
    /**
     * 
     * @type {string}
     * @memberof FrontOfficeCompanyCreateRequestDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof FrontOfficeCompanyCreateRequestDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FrontOfficeCompanyCreateRequestDto
     */
    'address'?: string;
    /**
     * The email of the Company
     * @type {string}
     * @memberof FrontOfficeCompanyCreateRequestDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof FrontOfficeCompanyCreateRequestDto
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof FrontOfficeCompanyCreateRequestDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FrontOfficeCompanyCreateRequestDto
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface FrontOfficeCompanyCreateResponseDto
 */
export interface FrontOfficeCompanyCreateResponseDto {
    /**
     * 
     * @type {CompanyEntityDto}
     * @memberof FrontOfficeCompanyCreateResponseDto
     */
    'company': CompanyEntityDto;
    /**
     * 
     * @type {string}
     * @memberof FrontOfficeCompanyCreateResponseDto
     */
    'role': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof FrontOfficeCompanyCreateResponseDto
     */
    'permissions': Array<string>;
}
/**
 * 
 * @export
 * @interface HealthControllerDefaultHealthCheck200Response
 */
export interface HealthControllerDefaultHealthCheck200Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerDefaultHealthCheck200Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; }}
     * @memberof HealthControllerDefaultHealthCheck200Response
     */
    'info'?: { [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; }}
     * @memberof HealthControllerDefaultHealthCheck200Response
     */
    'error'?: { [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; }}
     * @memberof HealthControllerDefaultHealthCheck200Response
     */
    'details'?: { [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface HealthControllerDefaultHealthCheck200ResponseInfoValue
 */
export interface HealthControllerDefaultHealthCheck200ResponseInfoValue {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof HealthControllerDefaultHealthCheck200ResponseInfoValue
     */
    'status'?: string;
}
/**
 * 
 * @export
 * @interface HealthControllerDefaultHealthCheck503Response
 */
export interface HealthControllerDefaultHealthCheck503Response {
    /**
     * 
     * @type {string}
     * @memberof HealthControllerDefaultHealthCheck503Response
     */
    'status'?: string;
    /**
     * 
     * @type {{ [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; }}
     * @memberof HealthControllerDefaultHealthCheck503Response
     */
    'info'?: { [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; }}
     * @memberof HealthControllerDefaultHealthCheck503Response
     */
    'error'?: { [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; } | null;
    /**
     * 
     * @type {{ [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; }}
     * @memberof HealthControllerDefaultHealthCheck503Response
     */
    'details'?: { [key: string]: HealthControllerDefaultHealthCheck200ResponseInfoValue; };
}
/**
 * 
 * @export
 * @interface LoginUserRequestDto
 */
export interface LoginUserRequestDto {
    /**
     * The email of the User
     * @type {string}
     * @memberof LoginUserRequestDto
     */
    'email': string;
    /**
     * The password of the User
     * @type {string}
     * @memberof LoginUserRequestDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginUserResponseDto
 */
export interface LoginUserResponseDto {
    /**
     * 
     * @type {UserEntityDto}
     * @memberof LoginUserResponseDto
     */
    'user': UserEntityDto;
    /**
     * 
     * @type {string}
     * @memberof LoginUserResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserResponseDto
     */
    'refreshToken': string;
    /**
     * 
     * @type {Array<MenuDto>}
     * @memberof LoginUserResponseDto
     */
    'userMenu'?: Array<MenuDto>;
    /**
     * 
     * @type {Array<ContextCompanyDto>}
     * @memberof LoginUserResponseDto
     */
    'userCompanies'?: Array<ContextCompanyDto>;
}
/**
 * 
 * @export
 * @interface MenuDto
 */
export interface MenuDto {
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'link'?: string;
    /**
     * 
     * @type {number}
     * @memberof MenuDto
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof MenuDto
     */
    'parentId'?: string;
}
/**
 * 
 * @export
 * @interface RefreshAccessTokenRequestDto
 */
export interface RefreshAccessTokenRequestDto {
    /**
     * uuid for refresh token
     * @type {string}
     * @memberof RefreshAccessTokenRequestDto
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface RefreshAccessTokenResponseDto
 */
export interface RefreshAccessTokenResponseDto {
    /**
     * 
     * @type {UserEntityDto}
     * @memberof RefreshAccessTokenResponseDto
     */
    'user': UserEntityDto;
    /**
     * 
     * @type {string}
     * @memberof RefreshAccessTokenResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {Array<MenuDto>}
     * @memberof RefreshAccessTokenResponseDto
     */
    'userMenu'?: Array<MenuDto>;
    /**
     * 
     * @type {Array<ContextCompanyDto>}
     * @memberof RefreshAccessTokenResponseDto
     */
    'userCompanies'?: Array<ContextCompanyDto>;
}
/**
 * 
 * @export
 * @interface UserCompanyRolePresenterDto
 */
export interface UserCompanyRolePresenterDto {
    /**
     * 
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'companyId': string;
    /**
     * 
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {CompanyEntityDto}
     * @memberof UserCompanyRolePresenterDto
     */
    'company'?: CompanyEntityDto;
    /**
     * User email
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'email': string;
    /**
     * user First Name
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'firstName': string;
    /**
     * user Last Name
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'lastName': string;
    /**
     * user username
     * @type {string}
     * @memberof UserCompanyRolePresenterDto
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface UserCreateRequestDto
 */
export interface UserCreateRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'lastName'?: string;
    /**
     * The email of the User
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'phoneNumber'?: string;
    /**
     * The password of the User
     * @type {string}
     * @memberof UserCreateRequestDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserCreateResponseDto
 */
export interface UserCreateResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'lastName'?: string;
    /**
     * The email of the User
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'phoneNumber'?: string;
    /**
     * The password of the User
     * @type {string}
     * @memberof UserCreateResponseDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserEntityDto
 */
export interface UserEntityDto {
    /**
     * 
     * @type {string}
     * @memberof UserEntityDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntityDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntityDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntityDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntityDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserEntityDto
     */
    'lastName'?: string;
    /**
     * The email of the User
     * @type {string}
     * @memberof UserEntityDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntityDto
     */
    'phoneNumber'?: string;
    /**
     * The password of the User
     * @type {string}
     * @memberof UserEntityDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserFindByCriteriaResponseDtoClass
 */
export interface UserFindByCriteriaResponseDtoClass {
    /**
     * Total number of items
     * @type {number}
     * @memberof UserFindByCriteriaResponseDtoClass
     */
    'total': number;
    /**
     * Current page of the results
     * @type {number}
     * @memberof UserFindByCriteriaResponseDtoClass
     */
    'page'?: number;
    /**
     * Limit for the results
     * @type {number}
     * @memberof UserFindByCriteriaResponseDtoClass
     */
    'limit'?: number;
    /**
     * Array of resulting items
     * @type {Array<UserEntityDto>}
     * @memberof UserFindByCriteriaResponseDtoClass
     */
    'items': Array<UserEntityDto>;
}
/**
 * 
 * @export
 * @interface UserUpdateRequestDto
 */
export interface UserUpdateRequestDto {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'lastName'?: string;
    /**
     * The email of the User
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'phoneNumber'?: string;
    /**
     * The password of the User
     * @type {string}
     * @memberof UserUpdateRequestDto
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface UserUpdateResponseDto
 */
export interface UserUpdateResponseDto {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'lastName'?: string;
    /**
     * The email of the User
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'phoneNumber'?: string;
    /**
     * The password of the User
     * @type {string}
     * @memberof UserUpdateResponseDto
     */
    'password'?: string;
}

/**
 * CompanyCrudApi - axios parameter creator
 * @export
 */
export const CompanyCrudApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {CompanyEntityDto} companyEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerCreate: async (companyEntityDto: CompanyEntityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyEntityDto' is not null or undefined
            assertParamExists('companyCrudControllerCreate', 'companyEntityDto', companyEntityDto)
            const localVarPath = `/company-crud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyEntityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyCrudControllerDelete', 'id', id)
            const localVarPath = `/company-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company-crud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerFindByCriteria: async (findByCriteriaRequestDto: FindByCriteriaRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findByCriteriaRequestDto' is not null or undefined
            assertParamExists('companyCrudControllerFindByCriteria', 'findByCriteriaRequestDto', findByCriteriaRequestDto)
            const localVarPath = `/company-crud/find-by-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findByCriteriaRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyCrudControllerFindOne', 'id', id)
            const localVarPath = `/company-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {CompanyEntityDto} companyEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerUpdate: async (id: string, companyEntityDto: CompanyEntityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyCrudControllerUpdate', 'id', id)
            // verify required parameter 'companyEntityDto' is not null or undefined
            assertParamExists('companyCrudControllerUpdate', 'companyEntityDto', companyEntityDto)
            const localVarPath = `/company-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyEntityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyCrudApi - functional programming interface
 * @export
 */
export const CompanyCrudApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyCrudApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {CompanyEntityDto} companyEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCrudControllerCreate(companyEntityDto: CompanyEntityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyEntityDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCrudControllerCreate(companyEntityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCrudControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCrudControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCrudControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyEntityDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCrudControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyFindByCriteriaResponseDtoClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCrudControllerFindByCriteria(findByCriteriaRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCrudControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyEntityDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCrudControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {CompanyEntityDto} companyEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCrudControllerUpdate(id: string, companyEntityDto: CompanyEntityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyEntityDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCrudControllerUpdate(id, companyEntityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyCrudApi - factory interface
 * @export
 */
export const CompanyCrudApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyCrudApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {CompanyEntityDto} companyEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerCreate(companyEntityDto: CompanyEntityDto, options?: any): AxiosPromise<CompanyEntityDto> {
            return localVarFp.companyCrudControllerCreate(companyEntityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.companyCrudControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerFindAll(options?: any): AxiosPromise<Array<CompanyEntityDto>> {
            return localVarFp.companyCrudControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: any): AxiosPromise<CompanyFindByCriteriaResponseDtoClass> {
            return localVarFp.companyCrudControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerFindOne(id: string, options?: any): AxiosPromise<CompanyEntityDto> {
            return localVarFp.companyCrudControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {CompanyEntityDto} companyEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCrudControllerUpdate(id: string, companyEntityDto: CompanyEntityDto, options?: any): AxiosPromise<CompanyEntityDto> {
            return localVarFp.companyCrudControllerUpdate(id, companyEntityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyCrudApi - object-oriented interface
 * @export
 * @class CompanyCrudApi
 * @extends {BaseAPI}
 */
export class CompanyCrudApi extends BaseAPI {
    /**
     * 
     * @summary Create a new entity
     * @param {CompanyEntityDto} companyEntityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCrudApi
     */
    public companyCrudControllerCreate(companyEntityDto: CompanyEntityDto, options?: AxiosRequestConfig) {
        return CompanyCrudApiFp(this.configuration).companyCrudControllerCreate(companyEntityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an entity
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCrudApi
     */
    public companyCrudControllerDelete(id: string, options?: AxiosRequestConfig) {
        return CompanyCrudApiFp(this.configuration).companyCrudControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCrudApi
     */
    public companyCrudControllerFindAll(options?: AxiosRequestConfig) {
        return CompanyCrudApiFp(this.configuration).companyCrudControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search entities by criteria
     * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCrudApi
     */
    public companyCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig) {
        return CompanyCrudApiFp(this.configuration).companyCrudControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an entity by its ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCrudApi
     */
    public companyCrudControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return CompanyCrudApiFp(this.configuration).companyCrudControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing entity
     * @param {string} id 
     * @param {CompanyEntityDto} companyEntityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyCrudApi
     */
    public companyCrudControllerUpdate(id: string, companyEntityDto: CompanyEntityDto, options?: AxiosRequestConfig) {
        return CompanyCrudApiFp(this.configuration).companyCrudControllerUpdate(id, companyEntityDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyRoleCrudApi - axios parameter creator
 * @export
 */
export const CompanyRoleCrudApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {CompanyUsersDto} companyUsersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerCreate: async (companyUsersDto: CompanyUsersDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyUsersDto' is not null or undefined
            assertParamExists('companyRoleCrudControllerCreate', 'companyUsersDto', companyUsersDto)
            const localVarPath = `/company-role-crud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyUsersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyRoleCrudControllerDelete', 'id', id)
            const localVarPath = `/company-role-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company-role-crud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerFindByCriteria: async (findByCriteriaRequestDto: FindByCriteriaRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findByCriteriaRequestDto' is not null or undefined
            assertParamExists('companyRoleCrudControllerFindByCriteria', 'findByCriteriaRequestDto', findByCriteriaRequestDto)
            const localVarPath = `/company-role-crud/find-by-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findByCriteriaRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyRoleCrudControllerFindOne', 'id', id)
            const localVarPath = `/company-role-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {CompanyUsersDto} companyUsersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerUpdate: async (id: string, companyUsersDto: CompanyUsersDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyRoleCrudControllerUpdate', 'id', id)
            // verify required parameter 'companyUsersDto' is not null or undefined
            assertParamExists('companyRoleCrudControllerUpdate', 'companyUsersDto', companyUsersDto)
            const localVarPath = `/company-role-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyUsersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyRoleCrudApi - functional programming interface
 * @export
 */
export const CompanyRoleCrudApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyRoleCrudApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {CompanyUsersDto} companyUsersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleCrudControllerCreate(companyUsersDto: CompanyUsersDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyUsersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleCrudControllerCreate(companyUsersDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleCrudControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleCrudControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleCrudControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyUsersDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleCrudControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindByCriteriaCompanyUsersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleCrudControllerFindByCriteria(findByCriteriaRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleCrudControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyUsersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleCrudControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {CompanyUsersDto} companyUsersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRoleCrudControllerUpdate(id: string, companyUsersDto: CompanyUsersDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyUsersDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRoleCrudControllerUpdate(id, companyUsersDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyRoleCrudApi - factory interface
 * @export
 */
export const CompanyRoleCrudApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyRoleCrudApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {CompanyUsersDto} companyUsersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerCreate(companyUsersDto: CompanyUsersDto, options?: any): AxiosPromise<CompanyUsersDto> {
            return localVarFp.companyRoleCrudControllerCreate(companyUsersDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.companyRoleCrudControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerFindAll(options?: any): AxiosPromise<Array<CompanyUsersDto>> {
            return localVarFp.companyRoleCrudControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: any): AxiosPromise<FindByCriteriaCompanyUsersDto> {
            return localVarFp.companyRoleCrudControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerFindOne(id: string, options?: any): AxiosPromise<CompanyUsersDto> {
            return localVarFp.companyRoleCrudControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {CompanyUsersDto} companyUsersDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRoleCrudControllerUpdate(id: string, companyUsersDto: CompanyUsersDto, options?: any): AxiosPromise<CompanyUsersDto> {
            return localVarFp.companyRoleCrudControllerUpdate(id, companyUsersDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyRoleCrudApi - object-oriented interface
 * @export
 * @class CompanyRoleCrudApi
 * @extends {BaseAPI}
 */
export class CompanyRoleCrudApi extends BaseAPI {
    /**
     * 
     * @summary Create a new entity
     * @param {CompanyUsersDto} companyUsersDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleCrudApi
     */
    public companyRoleCrudControllerCreate(companyUsersDto: CompanyUsersDto, options?: AxiosRequestConfig) {
        return CompanyRoleCrudApiFp(this.configuration).companyRoleCrudControllerCreate(companyUsersDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an entity
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleCrudApi
     */
    public companyRoleCrudControllerDelete(id: string, options?: AxiosRequestConfig) {
        return CompanyRoleCrudApiFp(this.configuration).companyRoleCrudControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleCrudApi
     */
    public companyRoleCrudControllerFindAll(options?: AxiosRequestConfig) {
        return CompanyRoleCrudApiFp(this.configuration).companyRoleCrudControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search entities by criteria
     * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleCrudApi
     */
    public companyRoleCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig) {
        return CompanyRoleCrudApiFp(this.configuration).companyRoleCrudControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an entity by its ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleCrudApi
     */
    public companyRoleCrudControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return CompanyRoleCrudApiFp(this.configuration).companyRoleCrudControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing entity
     * @param {string} id 
     * @param {CompanyUsersDto} companyUsersDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyRoleCrudApi
     */
    public companyRoleCrudControllerUpdate(id: string, companyUsersDto: CompanyUsersDto, options?: AxiosRequestConfig) {
        return CompanyRoleCrudApiFp(this.configuration).companyRoleCrudControllerUpdate(id, companyUsersDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyUserCrudApi - axios parameter creator
 * @export
 */
export const CompanyUserCrudApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerCreate: async (userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCompanyRolePresenterDto' is not null or undefined
            assertParamExists('companyUserControllerCreate', 'userCompanyRolePresenterDto', userCompanyRolePresenterDto)
            const localVarPath = `/company-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCompanyRolePresenterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyUserControllerDelete', 'id', id)
            const localVarPath = `/company-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/company-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerFindByCriteria: async (findByCriteriaRequestDto: FindByCriteriaRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findByCriteriaRequestDto' is not null or undefined
            assertParamExists('companyUserControllerFindByCriteria', 'findByCriteriaRequestDto', findByCriteriaRequestDto)
            const localVarPath = `/company-user/find-by-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findByCriteriaRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyUserControllerFindOne', 'id', id)
            const localVarPath = `/company-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerUpdate: async (id: string, userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyUserControllerUpdate', 'id', id)
            // verify required parameter 'userCompanyRolePresenterDto' is not null or undefined
            assertParamExists('companyUserControllerUpdate', 'userCompanyRolePresenterDto', userCompanyRolePresenterDto)
            const localVarPath = `/company-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCompanyRolePresenterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyUserCrudApi - functional programming interface
 * @export
 */
export const CompanyUserCrudApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyUserCrudApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUserControllerCreate(userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCompanyRolePresenterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUserControllerCreate(userCompanyRolePresenterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUserControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUserControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUserControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCompanyRolePresenterDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUserControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUserControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindByCriteriaUserCompanyRolePresenterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUserControllerFindByCriteria(findByCriteriaRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUserControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCompanyRolePresenterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUserControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUserControllerUpdate(id: string, userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCompanyRolePresenterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUserControllerUpdate(id, userCompanyRolePresenterDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyUserCrudApi - factory interface
 * @export
 */
export const CompanyUserCrudApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyUserCrudApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerCreate(userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options?: any): AxiosPromise<UserCompanyRolePresenterDto> {
            return localVarFp.companyUserControllerCreate(userCompanyRolePresenterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.companyUserControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerFindAll(options?: any): AxiosPromise<Array<UserCompanyRolePresenterDto>> {
            return localVarFp.companyUserControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: any): AxiosPromise<FindByCriteriaUserCompanyRolePresenterDto> {
            return localVarFp.companyUserControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerFindOne(id: string, options?: any): AxiosPromise<UserCompanyRolePresenterDto> {
            return localVarFp.companyUserControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUserControllerUpdate(id: string, userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options?: any): AxiosPromise<UserCompanyRolePresenterDto> {
            return localVarFp.companyUserControllerUpdate(id, userCompanyRolePresenterDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyUserCrudApi - object-oriented interface
 * @export
 * @class CompanyUserCrudApi
 * @extends {BaseAPI}
 */
export class CompanyUserCrudApi extends BaseAPI {
    /**
     * 
     * @summary Create a new entity
     * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUserCrudApi
     */
    public companyUserControllerCreate(userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options?: AxiosRequestConfig) {
        return CompanyUserCrudApiFp(this.configuration).companyUserControllerCreate(userCompanyRolePresenterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an entity
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUserCrudApi
     */
    public companyUserControllerDelete(id: string, options?: AxiosRequestConfig) {
        return CompanyUserCrudApiFp(this.configuration).companyUserControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUserCrudApi
     */
    public companyUserControllerFindAll(options?: AxiosRequestConfig) {
        return CompanyUserCrudApiFp(this.configuration).companyUserControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search entities by criteria
     * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUserCrudApi
     */
    public companyUserControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig) {
        return CompanyUserCrudApiFp(this.configuration).companyUserControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an entity by its ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUserCrudApi
     */
    public companyUserControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return CompanyUserCrudApiFp(this.configuration).companyUserControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing entity
     * @param {string} id 
     * @param {UserCompanyRolePresenterDto} userCompanyRolePresenterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyUserCrudApi
     */
    public companyUserControllerUpdate(id: string, userCompanyRolePresenterDto: UserCompanyRolePresenterDto, options?: AxiosRequestConfig) {
        return CompanyUserCrudApiFp(this.configuration).companyUserControllerUpdate(id, userCompanyRolePresenterDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ContextApi - axios parameter creator
 * @export
 */
export const ContextApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login User
         * @param {LoginUserRequestDto} loginUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerAdminLogin: async (loginUserRequestDto: LoginUserRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserRequestDto' is not null or undefined
            assertParamExists('contextControllerAdminLogin', 'loginUserRequestDto', loginUserRequestDto)
            const localVarPath = `/context/admin-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Access Token with refresh token
         * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerAdminRefreshAccessToken: async (refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshAccessTokenRequestDto' is not null or undefined
            assertParamExists('contextControllerAdminRefreshAccessToken', 'refreshAccessTokenRequestDto', refreshAccessTokenRequestDto)
            const localVarPath = `/context/admin-refresh-access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshAccessTokenRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {UserCreateRequestDto} userCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerCreate: async (userCreateRequestDto: UserCreateRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateRequestDto' is not null or undefined
            assertParamExists('contextControllerCreate', 'userCreateRequestDto', userCreateRequestDto)
            const localVarPath = `/context`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contextControllerDelete', 'id', id)
            const localVarPath = `/context/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {LoginUserRequestDto} loginUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerLogin: async (loginUserRequestDto: LoginUserRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserRequestDto' is not null or undefined
            assertParamExists('contextControllerLogin', 'loginUserRequestDto', loginUserRequestDto)
            const localVarPath = `/context/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Access Token with refresh token
         * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerRefreshAccessToken: async (refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshAccessTokenRequestDto' is not null or undefined
            assertParamExists('contextControllerRefreshAccessToken', 'refreshAccessTokenRequestDto', refreshAccessTokenRequestDto)
            const localVarPath = `/context/refresh-access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshAccessTokenRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user by ID
         * @param {string} id 
         * @param {UserUpdateRequestDto} userUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerUpdate: async (id: string, userUpdateRequestDto: UserUpdateRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contextControllerUpdate', 'id', id)
            // verify required parameter 'userUpdateRequestDto' is not null or undefined
            assertParamExists('contextControllerUpdate', 'userUpdateRequestDto', userUpdateRequestDto)
            const localVarPath = `/context/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContextApi - functional programming interface
 * @export
 */
export const ContextApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContextApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login User
         * @param {LoginUserRequestDto} loginUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contextControllerAdminLogin(loginUserRequestDto: LoginUserRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contextControllerAdminLogin(loginUserRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Access Token with refresh token
         * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contextControllerAdminRefreshAccessToken(refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAccessTokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contextControllerAdminRefreshAccessToken(refreshAccessTokenRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a user
         * @param {UserCreateRequestDto} userCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contextControllerCreate(userCreateRequestDto: UserCreateRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contextControllerCreate(userCreateRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contextControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contextControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {LoginUserRequestDto} loginUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contextControllerLogin(loginUserRequestDto: LoginUserRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contextControllerLogin(loginUserRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Access Token with refresh token
         * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contextControllerRefreshAccessToken(refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshAccessTokenResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contextControllerRefreshAccessToken(refreshAccessTokenRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a user by ID
         * @param {string} id 
         * @param {UserUpdateRequestDto} userUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contextControllerUpdate(id: string, userUpdateRequestDto: UserUpdateRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contextControllerUpdate(id, userUpdateRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContextApi - factory interface
 * @export
 */
export const ContextApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContextApiFp(configuration)
    return {
        /**
         * 
         * @summary Login User
         * @param {LoginUserRequestDto} loginUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerAdminLogin(loginUserRequestDto: LoginUserRequestDto, options?: any): AxiosPromise<LoginUserResponseDto> {
            return localVarFp.contextControllerAdminLogin(loginUserRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Access Token with refresh token
         * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerAdminRefreshAccessToken(refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options?: any): AxiosPromise<RefreshAccessTokenResponseDto> {
            return localVarFp.contextControllerAdminRefreshAccessToken(refreshAccessTokenRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a user
         * @param {UserCreateRequestDto} userCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerCreate(userCreateRequestDto: UserCreateRequestDto, options?: any): AxiosPromise<UserCreateResponseDto> {
            return localVarFp.contextControllerCreate(userCreateRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.contextControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {LoginUserRequestDto} loginUserRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerLogin(loginUserRequestDto: LoginUserRequestDto, options?: any): AxiosPromise<LoginUserResponseDto> {
            return localVarFp.contextControllerLogin(loginUserRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Access Token with refresh token
         * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerRefreshAccessToken(refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options?: any): AxiosPromise<RefreshAccessTokenResponseDto> {
            return localVarFp.contextControllerRefreshAccessToken(refreshAccessTokenRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user by ID
         * @param {string} id 
         * @param {UserUpdateRequestDto} userUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contextControllerUpdate(id: string, userUpdateRequestDto: UserUpdateRequestDto, options?: any): AxiosPromise<UserUpdateResponseDto> {
            return localVarFp.contextControllerUpdate(id, userUpdateRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContextApi - object-oriented interface
 * @export
 * @class ContextApi
 * @extends {BaseAPI}
 */
export class ContextApi extends BaseAPI {
    /**
     * 
     * @summary Login User
     * @param {LoginUserRequestDto} loginUserRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApi
     */
    public contextControllerAdminLogin(loginUserRequestDto: LoginUserRequestDto, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).contextControllerAdminLogin(loginUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Access Token with refresh token
     * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApi
     */
    public contextControllerAdminRefreshAccessToken(refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).contextControllerAdminRefreshAccessToken(refreshAccessTokenRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a user
     * @param {UserCreateRequestDto} userCreateRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApi
     */
    public contextControllerCreate(userCreateRequestDto: UserCreateRequestDto, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).contextControllerCreate(userCreateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApi
     */
    public contextControllerDelete(id: string, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).contextControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {LoginUserRequestDto} loginUserRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApi
     */
    public contextControllerLogin(loginUserRequestDto: LoginUserRequestDto, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).contextControllerLogin(loginUserRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Access Token with refresh token
     * @param {RefreshAccessTokenRequestDto} refreshAccessTokenRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApi
     */
    public contextControllerRefreshAccessToken(refreshAccessTokenRequestDto: RefreshAccessTokenRequestDto, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).contextControllerRefreshAccessToken(refreshAccessTokenRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user by ID
     * @param {string} id 
     * @param {UserUpdateRequestDto} userUpdateRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextApi
     */
    public contextControllerUpdate(id: string, userUpdateRequestDto: UserUpdateRequestDto, options?: AxiosRequestConfig) {
        return ContextApiFp(this.configuration).contextControllerUpdate(id, userUpdateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreateCompanyApi - axios parameter creator
 * @export
 */
export const CreateCompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a company
         * @param {FrontOfficeCompanyCreateRequestDto} frontOfficeCompanyCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontOfficeCreateCompanyControllerCreate: async (frontOfficeCompanyCreateRequestDto: FrontOfficeCompanyCreateRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'frontOfficeCompanyCreateRequestDto' is not null or undefined
            assertParamExists('frontOfficeCreateCompanyControllerCreate', 'frontOfficeCompanyCreateRequestDto', frontOfficeCompanyCreateRequestDto)
            const localVarPath = `/create-company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(frontOfficeCompanyCreateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateCompanyApi - functional programming interface
 * @export
 */
export const CreateCompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateCompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a company
         * @param {FrontOfficeCompanyCreateRequestDto} frontOfficeCompanyCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async frontOfficeCreateCompanyControllerCreate(frontOfficeCompanyCreateRequestDto: FrontOfficeCompanyCreateRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrontOfficeCompanyCreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.frontOfficeCreateCompanyControllerCreate(frontOfficeCompanyCreateRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreateCompanyApi - factory interface
 * @export
 */
export const CreateCompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateCompanyApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a company
         * @param {FrontOfficeCompanyCreateRequestDto} frontOfficeCompanyCreateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontOfficeCreateCompanyControllerCreate(frontOfficeCompanyCreateRequestDto: FrontOfficeCompanyCreateRequestDto, options?: any): AxiosPromise<FrontOfficeCompanyCreateResponseDto> {
            return localVarFp.frontOfficeCreateCompanyControllerCreate(frontOfficeCompanyCreateRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreateCompanyApi - object-oriented interface
 * @export
 * @class CreateCompanyApi
 * @extends {BaseAPI}
 */
export class CreateCompanyApi extends BaseAPI {
    /**
     * 
     * @summary Create a company
     * @param {FrontOfficeCompanyCreateRequestDto} frontOfficeCompanyCreateRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateCompanyApi
     */
    public frontOfficeCreateCompanyControllerCreate(frontOfficeCompanyCreateRequestDto: FrontOfficeCompanyCreateRequestDto, options?: AxiosRequestConfig) {
        return CreateCompanyApiFp(this.configuration).frontOfficeCreateCompanyControllerCreate(frontOfficeCompanyCreateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerDefaultHealthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerDefaultHealthCheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerDefaultHealthCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerDefaultHealthCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerDefaultHealthCheck(options?: any): AxiosPromise<HealthControllerDefaultHealthCheck200Response> {
            return localVarFp.healthControllerDefaultHealthCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthControllerDefaultHealthCheck(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthControllerDefaultHealthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MigrationApi - axios parameter creator
 * @export
 */
export const MigrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete migration by name/id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrationControllerDeleteByName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('migrationControllerDeleteByName', 'name', name)
            const localVarPath = `/migration/delete/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute all migrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrationControllerExecute: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/migration/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute migration by name/id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrationControllerExecuteByName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('migrationControllerExecuteByName', 'name', name)
            const localVarPath = `/migration/execute/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MigrationApi - functional programming interface
 * @export
 */
export const MigrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MigrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete migration by name/id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrationControllerDeleteByName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.migrationControllerDeleteByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Execute all migrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrationControllerExecute(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.migrationControllerExecute(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Execute migration by name/id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async migrationControllerExecuteByName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.migrationControllerExecuteByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MigrationApi - factory interface
 * @export
 */
export const MigrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MigrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete migration by name/id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrationControllerDeleteByName(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.migrationControllerDeleteByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute all migrations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrationControllerExecute(options?: any): AxiosPromise<void> {
            return localVarFp.migrationControllerExecute(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute migration by name/id
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        migrationControllerExecuteByName(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.migrationControllerExecuteByName(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MigrationApi - object-oriented interface
 * @export
 * @class MigrationApi
 * @extends {BaseAPI}
 */
export class MigrationApi extends BaseAPI {
    /**
     * 
     * @summary Delete migration by name/id
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationApi
     */
    public migrationControllerDeleteByName(name: string, options?: AxiosRequestConfig) {
        return MigrationApiFp(this.configuration).migrationControllerDeleteByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute all migrations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationApi
     */
    public migrationControllerExecute(options?: AxiosRequestConfig) {
        return MigrationApiFp(this.configuration).migrationControllerExecute(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute migration by name/id
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationApi
     */
    public migrationControllerExecuteByName(name: string, options?: AxiosRequestConfig) {
        return MigrationApiFp(this.configuration).migrationControllerExecuteByName(name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserCrudApi - axios parameter creator
 * @export
 */
export const UserCrudApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {UserEntityDto} userEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerCreate: async (userEntityDto: UserEntityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userEntityDto' is not null or undefined
            assertParamExists('userCrudControllerCreate', 'userEntityDto', userEntityDto)
            const localVarPath = `/user-crud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userEntityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userCrudControllerDelete', 'id', id)
            const localVarPath = `/user-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-crud`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerFindByCriteria: async (findByCriteriaRequestDto: FindByCriteriaRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'findByCriteriaRequestDto' is not null or undefined
            assertParamExists('userCrudControllerFindByCriteria', 'findByCriteriaRequestDto', findByCriteriaRequestDto)
            const localVarPath = `/user-crud/find-by-criteria`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(findByCriteriaRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userCrudControllerFindOne', 'id', id)
            const localVarPath = `/user-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {UserEntityDto} userEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerUpdate: async (id: string, userEntityDto: UserEntityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userCrudControllerUpdate', 'id', id)
            // verify required parameter 'userEntityDto' is not null or undefined
            assertParamExists('userCrudControllerUpdate', 'userEntityDto', userEntityDto)
            const localVarPath = `/user-crud/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userEntityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserCrudApi - functional programming interface
 * @export
 */
export const UserCrudApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserCrudApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {UserEntityDto} userEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCrudControllerCreate(userEntityDto: UserEntityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntityDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCrudControllerCreate(userEntityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCrudControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCrudControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCrudControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserEntityDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCrudControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFindByCriteriaResponseDtoClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCrudControllerFindByCriteria(findByCriteriaRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCrudControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntityDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCrudControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {UserEntityDto} userEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCrudControllerUpdate(id: string, userEntityDto: UserEntityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntityDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCrudControllerUpdate(id, userEntityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserCrudApi - factory interface
 * @export
 */
export const UserCrudApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserCrudApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new entity
         * @param {UserEntityDto} userEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerCreate(userEntityDto: UserEntityDto, options?: any): AxiosPromise<UserEntityDto> {
            return localVarFp.userCrudControllerCreate(userEntityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an entity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.userCrudControllerDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerFindAll(options?: any): AxiosPromise<Array<UserEntityDto>> {
            return localVarFp.userCrudControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search entities by criteria
         * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: any): AxiosPromise<UserFindByCriteriaResponseDtoClass> {
            return localVarFp.userCrudControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve an entity by its ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerFindOne(id: string, options?: any): AxiosPromise<UserEntityDto> {
            return localVarFp.userCrudControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing entity
         * @param {string} id 
         * @param {UserEntityDto} userEntityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCrudControllerUpdate(id: string, userEntityDto: UserEntityDto, options?: any): AxiosPromise<UserEntityDto> {
            return localVarFp.userCrudControllerUpdate(id, userEntityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserCrudApi - object-oriented interface
 * @export
 * @class UserCrudApi
 * @extends {BaseAPI}
 */
export class UserCrudApi extends BaseAPI {
    /**
     * 
     * @summary Create a new entity
     * @param {UserEntityDto} userEntityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCrudApi
     */
    public userCrudControllerCreate(userEntityDto: UserEntityDto, options?: AxiosRequestConfig) {
        return UserCrudApiFp(this.configuration).userCrudControllerCreate(userEntityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an entity
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCrudApi
     */
    public userCrudControllerDelete(id: string, options?: AxiosRequestConfig) {
        return UserCrudApiFp(this.configuration).userCrudControllerDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCrudApi
     */
    public userCrudControllerFindAll(options?: AxiosRequestConfig) {
        return UserCrudApiFp(this.configuration).userCrudControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search entities by criteria
     * @param {FindByCriteriaRequestDto} findByCriteriaRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCrudApi
     */
    public userCrudControllerFindByCriteria(findByCriteriaRequestDto: FindByCriteriaRequestDto, options?: AxiosRequestConfig) {
        return UserCrudApiFp(this.configuration).userCrudControllerFindByCriteria(findByCriteriaRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve an entity by its ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCrudApi
     */
    public userCrudControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return UserCrudApiFp(this.configuration).userCrudControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing entity
     * @param {string} id 
     * @param {UserEntityDto} userEntityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserCrudApi
     */
    public userCrudControllerUpdate(id: string, userEntityDto: UserEntityDto, options?: AxiosRequestConfig) {
        return UserCrudApiFp(this.configuration).userCrudControllerUpdate(id, userEntityDto, options).then((request) => request(this.axios, this.basePath));
    }
}


